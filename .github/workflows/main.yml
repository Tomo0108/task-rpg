name: EC2 auto deploy  # ワークフローの名前

on:  # トリガー条件
  pull_request:  # プルリクエストに対する操作
    branches: [main]  # mainブランチへのプルリクエスト
    types: [closed]  # プルリクエストが閉じられた時

  workflow_dispatch:  # ワークフローを手動で起動

jobs:
  setup-cli:
    runs-on: ${{ matrix.os }}  # マトリックス戦略を使用して複数のOS上でジョブを実行
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]  # ジョブをWindows, Ubuntu, MacOSの最新バージョンで実行
    steps:
      # IP取得ライブラリをインストールするステップ (出力を使用するステップにidを追加)
      - name: Public IP Install
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Install AWS CLI on Windows  # Windows用のAWS CLIをインストールするステップ
        if: runner.os == 'Windows'  # 現在のランナーのOSがWindowsの場合にこのステップを実行
        run: |
          New-Item -ItemType Directory -Force -Path $Env:ProgramFiles\AWSCLI  # AWSCLIをインストールするディレクトリを作成
          Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "$Env:ProgramFiles\AWSCLI\AWSCLIV2.msi"  # AWS CLIのインストーラをダウンロード
          Start-Process msiexec.exe -ArgumentList '/i', "$Env:ProgramFiles\AWSCLI\AWSCLIV2.msi", '/qn', '/norestart' -NoNewWindow -Wait  # ダウンロードしたインストーラを実行してAWS CLIをインストール
          aws --version  # インストールされたAWS CLIのバージョンを表示
        shell: powershell  # このステップはPowerShellを使用して実行
  
      - name: Install AWS CLI on Linux or MacOS  # LinuxまたはMacOS用のAWS CLIをインストールするステップ
        if: runner.os != 'Windows'  # 現在のランナーのOSがWindows以外の場合にこのステップを実行
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"  # AWS CLIのZIPアーカイブをダウンロード
          unzip awscliv2.zip  # ZIPアーカイブを展開
          sudo ./aws/install --update  # 展開したファイルからAWS CLIをインストール
          aws --version  # インストールされたAWS CLIのバージョンを表示  

      # AWS CLIにキーを設定する
      - name: AWS set Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
    
      # デプロイ処理を実行する
      - name: Deploy
        run: |
          # SSHのセキュリティグループを開放する
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    
          # SSH接続して、git pullする
          echo "${{ secrets.GIT_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          # プロジェクトのディレクトリパスを動的に設定
          if [ "${{ runner.os }}" == "Windows" ]; then
            PROJECT_DIR="C:\\Users\\my-pc\\dev\\ssh_task-rpg\\task-rpg"
          elif [ "${{ runner.os }}" == "Linux" ]; then
            PROJECT_DIR="/Users/toumon/dev/create_apps/ssh_task-rpg"
          fi
          ssh -oStrictHostKeyChecking=no ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST_NAME }} -i private_key "cd $PROJECT_DIR && git fetch --prune && git checkout main && git pull origin main"
    
          # SSHのセキュリティグループを閉じる
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
